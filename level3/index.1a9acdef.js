function $parcel$export(e,a,t,r){Object.defineProperty(e,a,{get:t,set:r,enumerable:!0,configurable:!0})}var $parcel$global="undefined"!=typeof globalThis?globalThis:"undefined"!=typeof self?self:"undefined"!=typeof window?window:"undefined"!=typeof global?global:{},$parcel$modules={},$parcel$inits={},parcelRequire=$parcel$global.parcelRequiredf3e;null==parcelRequire&&(parcelRequire=function(e){if(e in $parcel$modules)return $parcel$modules[e].exports;if(e in $parcel$inits){var a=$parcel$inits[e];delete $parcel$inits[e];var t={id:e,exports:{}};return $parcel$modules[e]=t,a.call(t.exports,t,t.exports),t.exports}var r=new Error("Cannot find module '"+e+"'");throw r.code="MODULE_NOT_FOUND",r},parcelRequire.register=function(e,a){$parcel$inits[e]=a},$parcel$global.parcelRequiredf3e=parcelRequire),parcelRequire.register("3YhQm",(function(module,exports){var $4xklQ=parcelRequire("4xklQ"),$bsNDL=parcelRequire("bsNDL"),$7FzN9=parcelRequire("7FzN9"),$1M2iF=parcelRequire("1M2iF"),$kXIAH=parcelRequire("kXIAH"),$j0YSa=parcelRequire("j0YSa"),$dhcg3=parcelRequire("dhcg3");parcelRequire("iO2wr");var $hfAuX=parcelRequire("hfAuX"),$8TDdX=parcelRequire("8TDdX");const sceneProperties={cancelExecution:!1,timer:0,phase:0,executing:!1,mult:1},logModal=new(0,$8TDdX.Modal)(document.getElementById("logModal"));let timerUpadate,laserState,setLaserStates,setLaserStatesInterval,spikeTrapState,setSpikeTrapState,setSpikeTrapStateInterval;function updateTime(){sceneProperties.timer++}const editor=(0,$bsNDL.generateDefaultEditor)(document.getElementById("editorArea")),andarFrenteBtn=document.getElementById("andarFrente");andarFrenteBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"andarFrente(?)\n"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"andarFrente(?)\n"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const andarTrasBtn=document.getElementById("andarTras");andarTrasBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"andarTras(?)\n"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"andarTras(?)\n"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const girarEsquerdaBtn=document.getElementById("girarEsquerda");girarEsquerdaBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"girarEsquerda()\n"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"girarEsquerda()\n"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const girarDireitaBtn=document.getElementById("girarDireita");girarDireitaBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"girarDireita()\n"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"girarDireita()\n"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const darMeiaVoltaBtn=document.getElementById("darMeiaVolta");darMeiaVoltaBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"darMeiaVolta()\n"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"darMeiaVolta()\n"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const desativarLaserAzulBtn=document.getElementById("desativarLaserAzul");desativarLaserAzulBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"desativarLaserAzul()\n"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"desativarLaserAzul()\n"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const desativarLaserVermelhoBtn=document.getElementById("desativarLaserVermelho");desativarLaserVermelhoBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"desativarLaserVermelho()\n"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"desativarLaserVermelho()\n"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const coletarCristalBtn=document.getElementById("coletarCristal");coletarCristalBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"coletarCristal()\n"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"coletarCristal()\n"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const laserAzulAtivoBtn=document.getElementById("laserAzulAtivo");laserAzulAtivoBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"laserAzulAtivo()"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"laserAzulAtivo()"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const laserVermelhoAtivoBtn=document.getElementById("laserVermelhoAtivo");laserVermelhoAtivoBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"laserVermelhoAtivo()"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"laserVermelhoAtivo()"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const condicaoFullBtn=document.getElementById("condicaoFull");condicaoFullBtn.addEventListener("click",(()=>{let e,a,t=editor.state.selection.main.anchor,r=editor.state.selection.main.head;t<=r?(e=editor.state.update({changes:{from:t,to:r,insert:"se(?){\n\n}\nsenão{\n\n}\n"}}),a=editor.state.doc.lineAt(t).number):(e=editor.state.update({changes:{from:r,to:t,insert:"se(?){\n\n}\nsenão{\n\n}\n"}}),a=editor.state.doc.lineAt(r).number),editor.dispatch(e),editor.focus();let o=editor.state.doc.line(a+1).to;editor.dispatch({selection:{anchor:o}})}));const consoleElement=document.getElementById("consoleArea"),{renderer:renderer,scene:scene,camera:camera,controls:controls}=(0,$7FzN9.generateDefaultSceneObjects)(document.getElementById("phaseView")),gridMapHelper=new(0,$1M2iF.default),plane=gridMapHelper.createGridPlane(),actor=(0,$7FzN9.loadDefaultActor)(),wallTexture=(new $4xklQ.TextureLoader).load(new URL(parcelRequire("9fFOq")).toString());let objectives,walls,traps,laserFences,coletarCristal,resetLevel,winCondition;function changeLaserActiveStatus(e,a){gridMapHelper.lasers[e].active=a,0==a?laserFences[e].setNotVisible():"red"==gridMapHelper.lasers[e].state?(laserFences[e].setVisible(),laserFences[e].setRed()):(laserFences[e].setVisible(),laserFences[e].setBlue())}function changeLaserStateStatus(e,a){gridMapHelper.lasers.forEach((e=>{"multiColor"==e.type&&(e.state=a)})),"blue"==a?laserFences.forEach((e=>{"multiColor"==e.type&&e.setBlue()})):"red"==a&&laserFences.forEach((e=>{"multiColor"==e.type&&e.setRed()}))}function lasersVisualRestart(){for(let e=0;e<laserFences.length;e++)laserFences[e].active=!0}async function andarFrente(e){let a=e>10?10:e;await(0,$7FzN9.translateActor)(actor,a,gridMapHelper,sceneProperties,consoleElement)}async function andarTras(e){let a=e>10?10:e;await(0,$7FzN9.translateActor)(actor,-a,gridMapHelper,sceneProperties,consoleElement)}async function girarEsquerda(){await(0,$7FzN9.rotateActor)(actor,90,sceneProperties,1)}async function girarDireita(){await(0,$7FzN9.rotateActor)(actor,90,sceneProperties,-1)}async function darMeiaVolta(){await(0,$7FzN9.rotateActor)(actor,180,sceneProperties,1)}function laserAzulAtivo(){const e=new $4xklQ.Vector3;return actor.getObjectByName("interactionReference").getWorldPosition(e),null!=gridMapHelper.detectLaser(e,"blue")}function laserVermelhoAtivo(){const e=new $4xklQ.Vector3;return actor.getObjectByName("interactionReference").getWorldPosition(e),null!=gridMapHelper.detectLaser(e,"red")}function desativarLaserAzul(){const e=new $4xklQ.Vector3;actor.getObjectByName("interactionReference").getWorldPosition(e);let a=gridMapHelper.detectLaser(e,"blue");null!=a?changeLaserActiveStatus(a,!1):(consoleElement.innerText+="O robô entrou em curto circuito por tentar desativar um laser azul que não existe.\n",sceneProperties.cancelExecution=!0)}function desativarLaserVermelho(){const e=new $4xklQ.Vector3;actor.getObjectByName("interactionReference").getWorldPosition(e);let a=gridMapHelper.detectLaser(e,"red");null!=a?changeLaserActiveStatus(a,!1):(consoleElement.innerText+="O robô entrou em curto circuito por tentar desativar um laser vermelho que não existe.\n",sceneProperties.cancelExecution=!0)}function badLuck(e,a){const t=new $4xklQ.Vector3(gridMapHelper.getGlobalXPositionFromCoord(e[0]),0,gridMapHelper.getGlobalZPositionFromCoord(e[1]));let r="blue"==a?"red":"blue",o=gridMapHelper.detectLaser(t,a);null!=o&&("multiColor"==gridMapHelper.lasers[o].type?(gridMapHelper.lasers[o].state=r,"blue"==r?laserFences[o].setBlue():laserFences[o].setRed()):gridMapHelper.lasers[o].active?(gridMapHelper.lasers[o].active=!1,laserFences[o].setNotVisible()):(gridMapHelper.lasers[o].active=!0,laserFences[o].setVisible(),"blue"==gridMapHelper.lasers[o].state?laserFences[o].setBlue():laserFences[o].setRed()))}wallTexture.wrapS=$4xklQ.RepeatWrapping,wallTexture.wrapT=$4xklQ.RepeatWrapping,scene.add(plane),scene.add(actor);const phaseGeneration=[];function removeObjects(e,a,t,r){if(null!=e)for(let a=0;a<e.length;a++)scene.remove(e[a]);if(null!=a){for(let e=0;e<a.length;e++)scene.remove(a[e]);gridMapHelper.clearObstacles()}if(null!=t){for(let e=0;e<t.length;e++)scene.remove(t[e]);gridMapHelper.clearTraps()}if(null!=r){for(let e=0;e<r.length;e++)scene.remove(r[e]);gridMapHelper.clearLasers()}e=void 0,a=void 0,t=void 0,r=void 0}function animate(){renderer.render(scene,camera),controls.update(),requestAnimationFrame(animate),(0,$hfAuX.displayTime)(sceneProperties.timer,document.getElementById("timer"))}phaseGeneration.push((()=>{document.getElementById("phaseTitle").innerText="Nível 3 - Fase 1 de 8",document.getElementById("phaseObjective").innerText="Faça o robô chegar ao cristal, após isso, o colete.",sceneProperties.executing=!1,camera.position.set(0,15,30),actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),objectives=(0,$7FzN9.loadDefaultObjectives)(1),objectives[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(5)),gridMapHelper.addObstacle(9,9,5,5),scene.add(objectives[0]),walls=[];const e=new $4xklQ.BoxGeometry(18,2,2),a=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];a[2].map.repeat.set(9,1),a[3].map.repeat.set(9,1),a[4].map.repeat.set(9,1),a[5].map.repeat.set(9,1),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(4)),walls[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(6)),scene.add(walls[0]),scene.add(walls[1]),gridMapHelper.addObstacle(1,9,4,4),gridMapHelper.addObstacle(1,9,6,6),laserFences=[],laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(5)),gridMapHelper.addLaser(7,5,laserFences[0]),scene.add(laserFences[0]),laserState=0,setLaserStates=()=>{changeLaserStateStatus(0,0==laserState?"blue":"red")},coletarCristal=()=>{sceneProperties.cancelExecution||((0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[0],gridMapHelper)?(objectives[0].visible=!1,consoleElement.innerText+="Cristal coletado com sucesso.\n",gridMapHelper.obstacles[0].active=!1):consoleElement.innerText+="Robô não está em frente ao cristal.\n")},resetLevel=()=>{actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),actor.getObjectByName("eve").rotation.set(0,0,0),objectives[0].visible=!0,gridMapHelper.obstacles[0].active=!0,gridMapHelper.restartLasers(),lasersVisualRestart(),setLaserStates()},winCondition=()=>!objectives[0].visible,setLaserStatesInterval=setInterval((()=>{sceneProperties.executing||(laserState=(laserState+1)%2,setLaserStates())}),1e3),timerUpadate=setInterval(updateTime,1e3)})),phaseGeneration.push((()=>{document.getElementById("phaseTitle").innerText="Nível 3 - Fase 2 de 8",document.getElementById("phaseObjective").innerText="Faça o robô chegar aos cristais, após isso, os colete.",sceneProperties.executing=!1,camera.position.set(0,15,30),actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),objectives=(0,$7FzN9.loadDefaultObjectives)(2),objectives[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),0,gridMapHelper.getGlobalZPositionFromCoord(7)),objectives[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),0,gridMapHelper.getGlobalZPositionFromCoord(3)),gridMapHelper.addObstacle(4,4,7,7),gridMapHelper.addObstacle(4,4,3,3),scene.add(objectives[0]),scene.add(objectives[1]),traps=[],traps.push(new(0,$dhcg3.SpikeTrap)),traps[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),0,gridMapHelper.getGlobalZPositionFromCoord(5)),gridMapHelper.addTrap(3,5,traps[0]),scene.add(traps[0]),(0,$dhcg3.trapsActivation)(traps),walls=[];const e=new $4xklQ.BoxGeometry(6,2,2),a=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];a[2].map.repeat.set(3,1),a[3].map.repeat.set(3,1),a[4].map.repeat.set(3,1),a[5].map.repeat.set(3,1),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls.push(new $4xklQ.Mesh(e,a)),walls[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),1,gridMapHelper.getGlobalZPositionFromCoord(4)),walls[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),1,gridMapHelper.getGlobalZPositionFromCoord(6)),walls[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(3)),walls[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(7)),walls[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),1,gridMapHelper.getGlobalZPositionFromCoord(2)),walls[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),1,gridMapHelper.getGlobalZPositionFromCoord(8)),walls[6].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(3)),walls[7].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(7)),walls[8].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),1,gridMapHelper.getGlobalZPositionFromCoord(4)),walls[9].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),1,gridMapHelper.getGlobalZPositionFromCoord(6)),walls[2].rotateY(Math.PI/2),walls[3].rotateY(Math.PI/2),walls[6].rotateY(Math.PI/2),walls[7].rotateY(Math.PI/2),scene.add(walls[0]),scene.add(walls[1]),scene.add(walls[2]),scene.add(walls[3]),scene.add(walls[4]),scene.add(walls[5]),scene.add(walls[6]),scene.add(walls[7]),scene.add(walls[8]),scene.add(walls[9]),gridMapHelper.addObstacle(1,3,4,4),gridMapHelper.addObstacle(1,3,6,6),gridMapHelper.addObstacle(3,3,6,8),gridMapHelper.addObstacle(3,3,2,4),gridMapHelper.addObstacle(4,4,8,8),gridMapHelper.addObstacle(4,4,2,2),gridMapHelper.addObstacle(5,5,2,4),gridMapHelper.addObstacle(5,5,6,8),gridMapHelper.addObstacle(6,7,6,6),gridMapHelper.addObstacle(6,7,4,4),laserFences=[],laserFences.push(new(0,$j0YSa.default)("blue")),laserFences.push(new(0,$j0YSa.default)("red")),laserFences[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),1,gridMapHelper.getGlobalZPositionFromCoord(4)),laserFences[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),1,gridMapHelper.getGlobalZPositionFromCoord(6)),gridMapHelper.addLaser(4,4,laserFences[0]),gridMapHelper.addLaser(4,6,laserFences[1]),laserFences[0].rotateY(Math.PI/2),laserFences[1].rotateY(Math.PI/2),scene.add(laserFences[0]),scene.add(laserFences[1]),laserState=0,setLaserStates=()=>{0==laserState?(changeLaserActiveStatus(0,!0),changeLaserActiveStatus(1,!1)):(changeLaserActiveStatus(0,!1),changeLaserActiveStatus(1,!0))},coletarCristal=()=>{sceneProperties.cancelExecution||((0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[0],gridMapHelper)?(objectives[0].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[0].active=!1):(0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[1],gridMapHelper)?(objectives[1].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[1].active=!1):consoleElement.innerText+="Robô não está em frente ao cristal.\n",objectives[0].visible||objectives[1].visible||(consoleElement.innerText+="Todos os cristais coletados com sucesso!\n"))},resetLevel=()=>{actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),actor.getObjectByName("eve").rotation.set(0,0,0),objectives[0].visible=!0,objectives[1].visible=!0,gridMapHelper.obstacles[0].active=!0,gridMapHelper.obstacles[1].active=!0,gridMapHelper.restartLasers(),lasersVisualRestart(),setLaserStates()},winCondition=()=>!objectives[0].visible&&!objectives[1].visible,setLaserStatesInterval=setInterval((()=>{sceneProperties.executing||(laserState=(laserState+1)%2,setLaserStates())}),1e3),spikeTrapState=0,setSpikeTrapState=()=>{0==spikeTrapState?(0,$dhcg3.trapsDeactivation)(traps):(0,$dhcg3.trapsActivation)(traps)},setSpikeTrapStateInterval=setInterval((()=>{sceneProperties.executing||(spikeTrapState=(spikeTrapState+1)%2,setSpikeTrapState())}),1e3),timerUpadate=setInterval(updateTime,1e3)})),phaseGeneration.push((()=>{document.getElementById("phaseTitle").innerText="Nível 3 - Fase 3 de 8",document.getElementById("phaseObjective").innerText="Faça o robô chegar aos cristais, após isso, os colete.",sceneProperties.executing=!1,camera.position.set(0,15,30),actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),objectives=(0,$7FzN9.loadDefaultObjectives)(2),objectives[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(3)),objectives[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(6)),gridMapHelper.addObstacle(9,9,3,3),gridMapHelper.addObstacle(9,9,6,6),scene.add(objectives[0]),scene.add(objectives[1]),traps=[];new $4xklQ.BoxGeometry(2,1,2),new $4xklQ.MeshLambertMaterial({color:"rgb(255,0,0)"});traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),0,gridMapHelper.getGlobalZPositionFromCoord(2)),traps[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),0,gridMapHelper.getGlobalZPositionFromCoord(7)),traps[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),0,gridMapHelper.getGlobalZPositionFromCoord(4)),traps[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),0,gridMapHelper.getGlobalZPositionFromCoord(5)),traps[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(2)),traps[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(7)),gridMapHelper.addTrap(4,2,traps[0]),gridMapHelper.addTrap(4,7,traps[1]),gridMapHelper.addTrap(6,4,traps[2]),gridMapHelper.addTrap(6,5,traps[3]),gridMapHelper.addTrap(9,2,traps[4]),gridMapHelper.addTrap(9,7,traps[5]),scene.add(traps[0]),scene.add(traps[1]),scene.add(traps[2]),scene.add(traps[3]),scene.add(traps[4]),scene.add(traps[5]),walls=[];const e=new $4xklQ.BoxGeometry(10,2,2),a=new $4xklQ.BoxGeometry(12,2,2),t=new $4xklQ.BoxGeometry(4,2,2),r=new $4xklQ.BoxGeometry(6,2,2),o=new $4xklQ.BoxGeometry(2,2,2),l=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];l[2].map.repeat.set(5,1),l[3].map.repeat.set(5,1),l[4].map.repeat.set(5,1),l[5].map.repeat.set(5,1);const s=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];s[2].map.repeat.set(6,1),s[3].map.repeat.set(6,1),s[4].map.repeat.set(6,1),s[5].map.repeat.set(6,1);const i=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];i[2].map.repeat.set(2,1),i[3].map.repeat.set(2,1),i[4].map.repeat.set(2,1),i[5].map.repeat.set(2,1);const n=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];n[2].map.repeat.set(3,1),n[3].map.repeat.set(3,1),n[4].map.repeat.set(3,1),n[5].map.repeat.set(3,1);const p=new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()});walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(a,s)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(o,p)),walls.push(new $4xklQ.Mesh(o,p)),walls[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(9)),walls[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(0)),walls[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(4.5)),walls[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(4.5)),walls[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(7.5),1,gridMapHelper.getGlobalZPositionFromCoord(2)),walls[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(7.5),1,gridMapHelper.getGlobalZPositionFromCoord(7)),walls[6].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(4)),walls[7].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(5)),walls[8].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(2)),walls[9].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(7)),walls[2].rotateY(Math.PI/2),walls[3].rotateY(Math.PI/2),scene.add(walls[0]),scene.add(walls[1]),scene.add(walls[2]),scene.add(walls[3]),scene.add(walls[4]),scene.add(walls[5]),scene.add(walls[6]),scene.add(walls[7]),scene.add(walls[8]),scene.add(walls[9]),gridMapHelper.addObstacle(3,7,9,9),gridMapHelper.addObstacle(3,7,0,0),gridMapHelper.addObstacle(3,3,2,7),gridMapHelper.addObstacle(5,5,4,5),gridMapHelper.addObstacle(5,5,7,7),gridMapHelper.addObstacle(5,5,2,2),gridMapHelper.addObstacle(7,8,7,7),gridMapHelper.addObstacle(7,8,2,2),gridMapHelper.addObstacle(7,9,4,4),gridMapHelper.addObstacle(7,9,5,5),laserFences=[],laserFences.push(new(0,$j0YSa.default)("red")),laserFences.push(new(0,$j0YSa.default)("blue")),laserFences.push(new(0,$j0YSa.default)("red")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("blue")),laserFences[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(1)),laserFences[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(8)),laserFences[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(1)),laserFences[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(3)),laserFences[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(6)),laserFences[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(8)),gridMapHelper.addLaser(3,1,laserFences[0]),gridMapHelper.addLaser(3,8,laserFences[1]),gridMapHelper.addLaser(7,1,laserFences[2]),gridMapHelper.addLaser(7,3,laserFences[3]),gridMapHelper.addLaser(7,6,laserFences[4]),gridMapHelper.addLaser(7,8,laserFences[5]),scene.add(laserFences[0]),scene.add(laserFences[1]),scene.add(laserFences[2]),scene.add(laserFences[3]),scene.add(laserFences[4]),scene.add(laserFences[5]),laserState=0,setLaserStates=()=>{0==laserState?(changeLaserStateStatus(0,"blue"),changeLaserActiveStatus(0,!0),changeLaserActiveStatus(1,!0),changeLaserActiveStatus(2,!1),changeLaserActiveStatus(5,!1)):(changeLaserStateStatus(0,"red"),changeLaserActiveStatus(0,!1),changeLaserActiveStatus(1,!1),changeLaserActiveStatus(2,!0),changeLaserActiveStatus(5,!0))},coletarCristal=()=>{sceneProperties.cancelExecution||((0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[0],gridMapHelper)?(objectives[0].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[0].active=!1):(0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[1],gridMapHelper)?(objectives[1].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[1].active=!1):consoleElement.innerText+="Robô não está em frente ao cristal.\n",objectives[0].visible||objectives[1].visible||(consoleElement.innerText+="Todos os cristais coletados com sucesso!\n"))},resetLevel=()=>{actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),actor.getObjectByName("eve").rotation.set(0,0,0),objectives[0].visible=!0,objectives[1].visible=!0,gridMapHelper.obstacles[0].active=!0,gridMapHelper.obstacles[1].active=!0,gridMapHelper.restartLasers(),lasersVisualRestart(),setLaserStates()},winCondition=()=>!objectives[0].visible&&!objectives[1].visible,setLaserStatesInterval=setInterval((()=>{sceneProperties.executing||(laserState=(laserState+1)%2,setLaserStates())}),1e3),spikeTrapState=0,setSpikeTrapState=()=>{0==spikeTrapState?(0,$dhcg3.trapsDeactivation)(traps):(0,$dhcg3.trapsActivation)(traps)},setSpikeTrapStateInterval=setInterval((()=>{sceneProperties.executing||(spikeTrapState=(spikeTrapState+1)%2,setSpikeTrapState())}),1e3),timerUpadate=setInterval(updateTime,1e3)})),phaseGeneration.push((()=>{document.getElementById("phaseTitle").innerText="Nível 3 - Fase 4 de 8",document.getElementById("phaseObjective").innerText="Faça o robô chegar ao cristal, após isso, o colete.",sceneProperties.executing=!1,camera.position.set(0,15,30),actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),objectives=(0,$7FzN9.loadDefaultObjectives)(1),objectives[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),0,gridMapHelper.getGlobalZPositionFromCoord(9)),gridMapHelper.addObstacle(8,8,9,9),scene.add(objectives[0]),traps=[],traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(0),0,gridMapHelper.getGlobalZPositionFromCoord(4)),traps[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),0,gridMapHelper.getGlobalZPositionFromCoord(5)),traps[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),0,gridMapHelper.getGlobalZPositionFromCoord(1)),traps[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),0,gridMapHelper.getGlobalZPositionFromCoord(5)),gridMapHelper.addTrap(0,4,traps[0]),gridMapHelper.addTrap(3,5,traps[1]),gridMapHelper.addTrap(5,1,traps[2]),gridMapHelper.addTrap(7,5,traps[3]),scene.add(traps[0]),scene.add(traps[1]),scene.add(traps[2]),scene.add(traps[3]),walls=[];const e=new $4xklQ.BoxGeometry(12,2,2),a=new $4xklQ.BoxGeometry(6,2,2),t=new $4xklQ.BoxGeometry(10,2,2),r=new $4xklQ.BoxGeometry(8,2,2),o=new $4xklQ.BoxGeometry(20,2,2),l=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];l[2].map.repeat.set(6,1),l[3].map.repeat.set(6,1),l[4].map.repeat.set(6,1),l[5].map.repeat.set(6,1);const s=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];s[2].map.repeat.set(3,1),s[3].map.repeat.set(3,1),s[4].map.repeat.set(3,1),s[5].map.repeat.set(3,1);const i=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];i[2].map.repeat.set(5,1),i[3].map.repeat.set(5,1),i[4].map.repeat.set(5,1),i[5].map.repeat.set(5,1);const n=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];n[2].map.repeat.set(4,1),n[3].map.repeat.set(4,1),n[4].map.repeat.set(4,1),n[5].map.repeat.set(4,1);const p=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];p[2].map.repeat.set(10,1),p[3].map.repeat.set(10,1),p[4].map.repeat.set(10,1),p[5].map.repeat.set(10,1),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(a,s)),walls.push(new $4xklQ.Mesh(a,s)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(a,s)),walls.push(new $4xklQ.Mesh(a,s)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(o,p)),walls[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(2.5),1,gridMapHelper.getGlobalZPositionFromCoord(0)),walls[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(6)),walls[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),1,gridMapHelper.getGlobalZPositionFromCoord(2)),walls[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(3)),walls[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(7.5)),walls[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(3)),walls[6].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(7)),walls[7].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(2.5)),walls[8].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(7.5)),walls[9].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),1,gridMapHelper.getGlobalZPositionFromCoord(4.5)),gridMapHelper.addObstacle(0,5,0,0),gridMapHelper.addObstacle(1,1,4,8),gridMapHelper.addObstacle(1,3,2,2),gridMapHelper.addObstacle(3,3,2,4),gridMapHelper.addObstacle(3,3,6,9),gridMapHelper.addObstacle(5,5,2,4),gridMapHelper.addObstacle(5,5,6,8),gridMapHelper.addObstacle(7,7,1,4),gridMapHelper.addObstacle(7,7,6,9),gridMapHelper.addObstacle(9,9,0,9),walls[1].rotateY(Math.PI/2),walls[3].rotateY(Math.PI/2),walls[4].rotateY(Math.PI/2),walls[5].rotateY(Math.PI/2),walls[6].rotateY(Math.PI/2),walls[7].rotateY(Math.PI/2),walls[8].rotateY(Math.PI/2),walls[9].rotateY(Math.PI/2),scene.add(walls[0]),scene.add(walls[1]),scene.add(walls[2]),scene.add(walls[3]),scene.add(walls[4]),scene.add(walls[5]),scene.add(walls[6]),scene.add(walls[7]),scene.add(walls[8]),scene.add(walls[9]),laserFences=[],laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("blue")),laserFences.push(new(0,$j0YSa.default)("red")),laserFences[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(5)),laserFences[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(7)),laserFences[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(9)),gridMapHelper.addLaser(5,5,laserFences[0]),gridMapHelper.addLaser(8,7,laserFences[1]),gridMapHelper.addLaser(5,9,laserFences[2]),laserFences[1].rotateY(Math.PI/2),scene.add(laserFences[0]),scene.add(laserFences[1]),scene.add(laserFences[2]),laserState=0,setLaserStates=()=>{0==laserState?(changeLaserStateStatus(0,"blue"),changeLaserActiveStatus(1,!0),changeLaserActiveStatus(2,!1)):(changeLaserStateStatus(0,"red"),changeLaserActiveStatus(1,!1),changeLaserActiveStatus(2,!0))},coletarCristal=()=>{sceneProperties.cancelExecution||((0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[0],gridMapHelper)?(objectives[0].visible=!1,consoleElement.innerText+="Cristal coletado com sucesso.\n",gridMapHelper.obstacles[0].active=!1):consoleElement.innerText+="Robô não está em frente ao cristal.\n")},resetLevel=()=>{actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),actor.getObjectByName("eve").rotation.set(0,0,0),objectives[0].visible=!0,gridMapHelper.obstacles[0].active=!0,gridMapHelper.restartLasers(),lasersVisualRestart(),setLaserStates()},winCondition=()=>!objectives[0].visible,setLaserStatesInterval=setInterval((()=>{sceneProperties.executing||(laserState=(laserState+1)%2,setLaserStates())}),1e3),spikeTrapState=0,setSpikeTrapState=()=>{0==spikeTrapState?(0,$dhcg3.trapsDeactivation)(traps):(0,$dhcg3.trapsActivation)(traps)},setSpikeTrapStateInterval=setInterval((()=>{sceneProperties.executing||(spikeTrapState=(spikeTrapState+1)%2,setSpikeTrapState())}),1e3),timerUpadate=setInterval(updateTime,1e3)})),phaseGeneration.push((()=>{document.getElementById("phaseTitle").innerText="Nível 3 - Fase 5 de 8",document.getElementById("phaseObjective").innerText="Faça o robô chegar aos cristais, após isso, os colete.",sceneProperties.executing=!1,camera.position.set(0,15,30),actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),objectives=(0,$7FzN9.loadDefaultObjectives)(2),objectives[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(0),0,gridMapHelper.getGlobalZPositionFromCoord(0)),objectives[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(7)),gridMapHelper.addObstacle(0,0,0,0),gridMapHelper.addObstacle(9,9,7,7),scene.add(objectives[0]),scene.add(objectives[1]),traps=[],traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(0),0,gridMapHelper.getGlobalZPositionFromCoord(6)),traps[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),0,gridMapHelper.getGlobalZPositionFromCoord(6)),gridMapHelper.addTrap(0,6,traps[0]),gridMapHelper.addTrap(3,6,traps[1]),scene.add(traps[0]),scene.add(traps[1]),walls=[];const e=new $4xklQ.BoxGeometry(6,2,2),a=new $4xklQ.BoxGeometry(14,2,2),t=new $4xklQ.BoxGeometry(2,2,2),r=(new $4xklQ.BoxGeometry(10,2,2),new $4xklQ.BoxGeometry(4,2,2)),o=new $4xklQ.BoxGeometry(12,2,2),l=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];l[2].map.repeat.set(3,1),l[3].map.repeat.set(3,1),l[4].map.repeat.set(3,1),l[5].map.repeat.set(3,1);const s=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];s[2].map.repeat.set(7,1),s[3].map.repeat.set(7,1),s[4].map.repeat.set(7,1),s[5].map.repeat.set(7,1);const i=new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),n=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];n[2].map.repeat.set(2,1),n[3].map.repeat.set(2,1),n[4].map.repeat.set(2,1),n[5].map.repeat.set(2,1);const p=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];p[2].map.repeat.set(6,1),p[3].map.repeat.set(6,1),p[4].map.repeat.set(6,1),p[5].map.repeat.set(6,1),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(o,p)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(o,p)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(a,s)),walls.push(new $4xklQ.Mesh(t,i)),walls[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(5)),walls[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(9)),walls[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(4)),walls[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(4.5),1,gridMapHelper.getGlobalZPositionFromCoord(1)),walls[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(3)),walls[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),1,gridMapHelper.getGlobalZPositionFromCoord(2)),walls[6].position.set(gridMapHelper.getGlobalXPositionFromCoord(5.5),1,gridMapHelper.getGlobalZPositionFromCoord(7)),walls[7].position.set(gridMapHelper.getGlobalXPositionFromCoord(5.5),1,gridMapHelper.getGlobalZPositionFromCoord(8)),walls[8].position.set(gridMapHelper.getGlobalXPositionFromCoord(8.5),1,gridMapHelper.getGlobalZPositionFromCoord(9)),walls[9].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),1,gridMapHelper.getGlobalZPositionFromCoord(3)),walls[10].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(2)),gridMapHelper.addObstacle(1,1,4,6),gridMapHelper.addObstacle(0,2,9,9),gridMapHelper.addObstacle(2,4,4,4),gridMapHelper.addObstacle(2,7,1,1),gridMapHelper.addObstacle(4,6,3,3),gridMapHelper.addObstacle(6,6,2,2),gridMapHelper.addObstacle(3,8,7,7),gridMapHelper.addObstacle(5,6,8,8),gridMapHelper.addObstacle(8,9,9,9),gridMapHelper.addObstacle(9,9,0,6),gridMapHelper.addObstacle(1,1,2,2),walls[0].rotateY(Math.PI/2),walls[9].rotateY(Math.PI/2),scene.add(walls[0]),scene.add(walls[1]),scene.add(walls[2]),scene.add(walls[3]),scene.add(walls[4]),scene.add(walls[5]),scene.add(walls[6]),scene.add(walls[7]),scene.add(walls[8]),scene.add(walls[9]),scene.add(walls[10]),laserFences=[],laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("red")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("blue")),laserFences[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(2)),laserFences[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),1,gridMapHelper.getGlobalZPositionFromCoord(0)),laserFences[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(9)),laserFences[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(1)),laserFences[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(8)),gridMapHelper.addLaser(0,2,laserFences[0]),gridMapHelper.addLaser(2,0,laserFences[1]),gridMapHelper.addLaser(5,9,laserFences[2]),gridMapHelper.addLaser(8,1,laserFences[3]),gridMapHelper.addLaser(8,8,laserFences[4]),laserFences[0].rotateY(Math.PI/2),laserFences[3].rotateY(Math.PI/2),scene.add(laserFences[0]),scene.add(laserFences[1]),scene.add(laserFences[2]),scene.add(laserFences[3]),scene.add(laserFences[4]),laserState=0,setLaserStates=()=>{0==laserState?(changeLaserStateStatus(0,"blue"),changeLaserActiveStatus(2,!0),changeLaserActiveStatus(4,!1)):(changeLaserStateStatus(0,"red"),changeLaserActiveStatus(2,!1),changeLaserActiveStatus(4,!0))},coletarCristal=()=>{sceneProperties.cancelExecution||((0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[0],gridMapHelper)?(objectives[0].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[0].active=!1):(0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[1],gridMapHelper)?(objectives[1].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[1].active=!1):consoleElement.innerText+="Robô não está em frente ao cristal.\n",objectives[0].visible||objectives[1].visible||(consoleElement.innerText+="Todos os cristais coletados com sucesso!\n"))},resetLevel=()=>{actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),actor.getObjectByName("eve").rotation.set(0,0,0),objectives[0].visible=!0,objectives[1].visible=!0,gridMapHelper.obstacles[0].active=!0,gridMapHelper.obstacles[1].active=!0,gridMapHelper.restartLasers(),lasersVisualRestart(),setLaserStates()},winCondition=()=>!objectives[0].visible&&!objectives[1].visible,setLaserStatesInterval=setInterval((()=>{sceneProperties.executing||(laserState=(laserState+1)%2,setLaserStates())}),1e3),spikeTrapState=0,setSpikeTrapState=()=>{0==spikeTrapState?(0,$dhcg3.trapsDeactivation)(traps):(0,$dhcg3.trapsActivation)(traps)},setSpikeTrapStateInterval=setInterval((()=>{sceneProperties.executing||(spikeTrapState=(spikeTrapState+1)%2,setSpikeTrapState())}),1e3),timerUpadate=setInterval(updateTime,1e3)})),phaseGeneration.push((()=>{document.getElementById("phaseTitle").innerText="Nível 3 - Fase 6 de 8",document.getElementById("phaseObjective").innerText="Faça o robô chegar aos cristais, após isso, os colete.",sceneProperties.executing=!1,camera.position.set(0,15,30),actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),objectives=(0,$7FzN9.loadDefaultObjectives)(2),objectives[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(9)),objectives[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(0)),gridMapHelper.addObstacle(9,9,9,9),gridMapHelper.addObstacle(9,9,0,0),scene.add(objectives[0]),scene.add(objectives[1]),traps=[],traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),0,gridMapHelper.getGlobalZPositionFromCoord(4)),traps[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),0,gridMapHelper.getGlobalZPositionFromCoord(5)),traps[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),0,gridMapHelper.getGlobalZPositionFromCoord(3)),traps[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),0,gridMapHelper.getGlobalZPositionFromCoord(7)),traps[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),0,gridMapHelper.getGlobalZPositionFromCoord(8)),gridMapHelper.addTrap(3,4,traps[0]),gridMapHelper.addTrap(7,5,traps[1]),gridMapHelper.addTrap(8,3,traps[2]),gridMapHelper.addTrap(1,7,traps[3]),gridMapHelper.addTrap(3,8,traps[4]),scene.add(traps[0]),scene.add(traps[1]),scene.add(traps[2]),scene.add(traps[3]),scene.add(traps[4]),walls=[];const e=new $4xklQ.BoxGeometry(10,2,2),a=new $4xklQ.BoxGeometry(2,2,2),t=new $4xklQ.BoxGeometry(4,2,2),r=new $4xklQ.BoxGeometry(6,2,2),o=new $4xklQ.BoxGeometry(12,2,2),l=new $4xklQ.BoxGeometry(14,2,2),s=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];s[2].map.repeat.set(5,1),s[3].map.repeat.set(5,1),s[4].map.repeat.set(5,1),s[5].map.repeat.set(5,1);const i=new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),n=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];n[2].map.repeat.set(2,1),n[3].map.repeat.set(2,1),n[4].map.repeat.set(2,1),n[5].map.repeat.set(2,1);const p=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];p[2].map.repeat.set(3,1),p[3].map.repeat.set(3,1),p[4].map.repeat.set(3,1),p[5].map.repeat.set(3,1);const d=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];d[2].map.repeat.set(6,1),d[3].map.repeat.set(6,1),d[4].map.repeat.set(6,1),d[5].map.repeat.set(6,1);const c=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];c[2].map.repeat.set(7,1),c[3].map.repeat.set(7,1),c[4].map.repeat.set(7,1),c[5].map.repeat.set(7,1),walls.push(new $4xklQ.Mesh(e,s)),walls.push(new $4xklQ.Mesh(a,i)),walls.push(new $4xklQ.Mesh(t,n)),walls.push(new $4xklQ.Mesh(r,p)),walls.push(new $4xklQ.Mesh(o,d)),walls.push(new $4xklQ.Mesh(t,n)),walls.push(new $4xklQ.Mesh(t,n)),walls.push(new $4xklQ.Mesh(t,n)),walls.push(new $4xklQ.Mesh(a,i)),walls.push(new $4xklQ.Mesh(a,i)),walls.push(new $4xklQ.Mesh(l,c)),walls.push(new $4xklQ.Mesh(t,n)),walls.push(new $4xklQ.Mesh(t,n)),walls.push(new $4xklQ.Mesh(a,i)),walls.push(new $4xklQ.Mesh(a,i)),walls.push(new $4xklQ.Mesh(a,i)),walls[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),1,gridMapHelper.getGlobalZPositionFromCoord(9)),walls[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(8)),walls[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(1.5)),walls[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(2)),walls[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(2.5),1,gridMapHelper.getGlobalZPositionFromCoord(0)),walls[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(1.5),1,gridMapHelper.getGlobalZPositionFromCoord(5)),walls[6].position.set(gridMapHelper.getGlobalXPositionFromCoord(3.5),1,gridMapHelper.getGlobalZPositionFromCoord(6)),walls[7].position.set(gridMapHelper.getGlobalXPositionFromCoord(3.5),1,gridMapHelper.getGlobalZPositionFromCoord(3)),walls[8].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(7)),walls[9].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(2)),walls[10].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),1,gridMapHelper.getGlobalZPositionFromCoord(5)),walls[11].position.set(gridMapHelper.getGlobalXPositionFromCoord(8.5),1,gridMapHelper.getGlobalZPositionFromCoord(8)),walls[12].position.set(gridMapHelper.getGlobalXPositionFromCoord(8.5),1,gridMapHelper.getGlobalZPositionFromCoord(1)),walls[13].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(7)),walls[14].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),1,gridMapHelper.getGlobalZPositionFromCoord(5)),walls[15].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(2)),gridMapHelper.addObstacle(0,4,9,9),gridMapHelper.addObstacle(0,0,8,8),gridMapHelper.addObstacle(0,0,1,2),gridMapHelper.addObstacle(1,1,1,3),gridMapHelper.addObstacle(0,5,0,0),gridMapHelper.addObstacle(1,2,5,5),gridMapHelper.addObstacle(3,4,6,6),gridMapHelper.addObstacle(3,4,3,3),gridMapHelper.addObstacle(5,5,2,2),gridMapHelper.addObstacle(5,5,7,7),gridMapHelper.addObstacle(6,6,2,8),gridMapHelper.addObstacle(8,9,8,8),gridMapHelper.addObstacle(8,8,7,7),gridMapHelper.addObstacle(8,9,1,1),gridMapHelper.addObstacle(8,8,2,2),gridMapHelper.addObstacle(9,9,5,5),walls[2].rotateY(Math.PI/2),walls[3].rotateY(Math.PI/2),walls[10].rotateY(Math.PI/2),scene.add(walls[0]),scene.add(walls[1]),scene.add(walls[2]),scene.add(walls[3]),scene.add(walls[4]),scene.add(walls[5]),scene.add(walls[6]),scene.add(walls[7]),scene.add(walls[8]),scene.add(walls[9]),scene.add(walls[10]),scene.add(walls[11]),scene.add(walls[12]),scene.add(walls[13]),scene.add(walls[14]),scene.add(walls[15]),laserFences=[],laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("blue")),laserFences.push(new(0,$j0YSa.default)("blue")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),1,gridMapHelper.getGlobalZPositionFromCoord(3)),laserFences[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),1,gridMapHelper.getGlobalZPositionFromCoord(9)),laserFences[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(7)),laserFences[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(2)),laserFences[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(9)),laserFences[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(0)),gridMapHelper.addLaser(2,3,laserFences[0]),gridMapHelper.addLaser(6,9,laserFences[1]),gridMapHelper.addLaser(7,7,laserFences[2]),gridMapHelper.addLaser(7,2,laserFences[3]),gridMapHelper.addLaser(8,9,laserFences[4]),gridMapHelper.addLaser(8,0,laserFences[5]),laserFences[0].rotateY(Math.PI/2),laserFences[2].rotateY(Math.PI/2),laserFences[3].rotateY(Math.PI/2),scene.add(laserFences[0]),scene.add(laserFences[1]),scene.add(laserFences[2]),scene.add(laserFences[3]),scene.add(laserFences[4]),scene.add(laserFences[5]),laserState=0,setLaserStates=()=>{0==laserState?(changeLaserStateStatus(0,"blue"),changeLaserActiveStatus(2,!0),changeLaserActiveStatus(3,!1)):(changeLaserStateStatus(0,"red"),changeLaserActiveStatus(2,!1),changeLaserActiveStatus(3,!0))},coletarCristal=()=>{sceneProperties.cancelExecution||((0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[0],gridMapHelper)?(objectives[0].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[0].active=!1):(0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[1],gridMapHelper)?(objectives[1].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[1].active=!1):consoleElement.innerText+="Robô não está em frente ao cristal.\n",objectives[0].visible||objectives[1].visible||(consoleElement.innerText+="Todos os cristais coletados com sucesso!\n"))},resetLevel=()=>{actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),actor.getObjectByName("eve").rotation.set(0,0,0),objectives[0].visible=!0,objectives[1].visible=!0,gridMapHelper.obstacles[0].active=!0,gridMapHelper.obstacles[1].active=!0,gridMapHelper.restartLasers(),lasersVisualRestart(),setLaserStates()},winCondition=()=>!objectives[0].visible&&!objectives[1].visible,setLaserStatesInterval=setInterval((()=>{sceneProperties.executing||(laserState=(laserState+1)%2,setLaserStates())}),1e3),spikeTrapState=0,setSpikeTrapState=()=>{0==spikeTrapState?(0,$dhcg3.trapsDeactivation)(traps):(0,$dhcg3.trapsActivation)(traps)},setSpikeTrapStateInterval=setInterval((()=>{sceneProperties.executing||(spikeTrapState=(spikeTrapState+1)%2,setSpikeTrapState())}),1e3),timerUpadate=setInterval(updateTime,1e3)})),phaseGeneration.push((()=>{document.getElementById("phaseTitle").innerText="Nível 3 - Fase 7 de 8",document.getElementById("phaseObjective").innerText="Faça o robô chegar aos cristais, após isso, os colete.",sceneProperties.executing=!1,camera.position.set(0,15,30),actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),objectives=(0,$7FzN9.loadDefaultObjectives)(2),objectives[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),0,gridMapHelper.getGlobalZPositionFromCoord(6)),objectives[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),0,gridMapHelper.getGlobalZPositionFromCoord(5)),gridMapHelper.addObstacle(2,2,6,6),gridMapHelper.addObstacle(4,4,5,5),scene.add(objectives[0]),scene.add(objectives[1]),traps=[],traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),0,gridMapHelper.getGlobalZPositionFromCoord(6)),traps[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),0,gridMapHelper.getGlobalZPositionFromCoord(5)),traps[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(2)),gridMapHelper.addTrap(1,6,traps[0]),gridMapHelper.addTrap(7,5,traps[1]),gridMapHelper.addTrap(9,2,traps[2]),scene.add(traps[0]),scene.add(traps[1]),scene.add(traps[2]),walls=[];const e=new $4xklQ.BoxGeometry(6,2,2),a=new $4xklQ.BoxGeometry(12,2,2),t=new $4xklQ.BoxGeometry(4,2,2),r=new $4xklQ.BoxGeometry(2,2,2),o=new $4xklQ.BoxGeometry(8,2,2),l=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];l[2].map.repeat.set(3,1),l[3].map.repeat.set(3,1),l[4].map.repeat.set(3,1),l[5].map.repeat.set(3,1);const s=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];s[2].map.repeat.set(6,1),s[3].map.repeat.set(6,1),s[4].map.repeat.set(6,1),s[5].map.repeat.set(6,1);const i=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];i[2].map.repeat.set(2,1),i[3].map.repeat.set(2,1),i[4].map.repeat.set(2,1),i[5].map.repeat.set(2,1);const n=new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),p=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];p[2].map.repeat.set(4,1),p[3].map.repeat.set(4,1),p[4].map.repeat.set(4,1),p[5].map.repeat.set(4,1),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(a,s)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(o,p)),walls[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(2)),walls[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(8)),walls[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),1,gridMapHelper.getGlobalZPositionFromCoord(5)),walls[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(3)),walls[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),1,gridMapHelper.getGlobalZPositionFromCoord(1)),walls[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(5.5),1,gridMapHelper.getGlobalZPositionFromCoord(6)),walls[6].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),1,gridMapHelper.getGlobalZPositionFromCoord(7.5)),walls[7].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(4.5)),walls[8].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),1,gridMapHelper.getGlobalZPositionFromCoord(8.5)),walls[9].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(7.5)),walls[10].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(8)),walls[11].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),1,gridMapHelper.getGlobalZPositionFromCoord(4)),walls[12].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(2.5)),gridMapHelper.addObstacle(1,1,1,3),gridMapHelper.addObstacle(1,1,7,9),gridMapHelper.addObstacle(1,1,7,9),gridMapHelper.addObstacle(1,1,7,9),gridMapHelper.addObstacle(1,1,7,9),gridMapHelper.addObstacle(3,8,6,6),gridMapHelper.addObstacle(4,4,7,8),gridMapHelper.addObstacle(5,5,4,5),gridMapHelper.addObstacle(6,6,8,9),gridMapHelper.addObstacle(8,8,7,8),gridMapHelper.addObstacle(3,3,8,8),gridMapHelper.addObstacle(8,8,4,4),gridMapHelper.addObstacle(7,7,1,4),walls[0].rotateY(Math.PI/2),walls[1].rotateY(Math.PI/2),walls[3].rotateY(Math.PI/2),walls[6].rotateY(Math.PI/2),walls[7].rotateY(Math.PI/2),walls[8].rotateY(Math.PI/2),walls[9].rotateY(Math.PI/2),walls[12].rotateY(Math.PI/2),scene.add(walls[0]),scene.add(walls[1]),scene.add(walls[2]),scene.add(walls[3]),scene.add(walls[4]),scene.add(walls[5]),scene.add(walls[6]),scene.add(walls[7]),scene.add(walls[8]),scene.add(walls[9]),scene.add(walls[10]),scene.add(walls[11]),scene.add(walls[12]),laserFences=[],laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("blue")),laserFences.push(new(0,$j0YSa.default)("red")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(4)),laserFences[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(0)),laserFences[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),1,gridMapHelper.getGlobalZPositionFromCoord(8)),laserFences[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),1,gridMapHelper.getGlobalZPositionFromCoord(4)),laserFences[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),1,gridMapHelper.getGlobalZPositionFromCoord(7)),gridMapHelper.addLaser(1,4,laserFences[0]),gridMapHelper.addLaser(1,0,laserFences[1]),gridMapHelper.addLaser(2,8,laserFences[2]),gridMapHelper.addLaser(4,4,laserFences[3]),gridMapHelper.addLaser(6,7,laserFences[4]),laserFences[2].rotateY(Math.PI/2),laserFences[3].rotateY(Math.PI/2),scene.add(laserFences[0]),scene.add(laserFences[1]),scene.add(laserFences[2]),scene.add(laserFences[3]),scene.add(laserFences[4]),laserState=0,setLaserStates=()=>{0==laserState?(changeLaserStateStatus(0,"blue"),changeLaserActiveStatus(2,!0),changeLaserActiveStatus(3,!1)):(changeLaserStateStatus(0,"red"),changeLaserActiveStatus(2,!1),changeLaserActiveStatus(3,!0))},coletarCristal=()=>{sceneProperties.cancelExecution||((0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[0],gridMapHelper)?(objectives[0].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[0].active=!1):(0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[1],gridMapHelper)?(objectives[1].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[1].active=!1):consoleElement.innerText+="Robô não está em frente ao cristal.\n",objectives[0].visible||objectives[1].visible||(consoleElement.innerText+="Todos os cristais coletados com sucesso!\n"))},resetLevel=()=>{actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),actor.getObjectByName("eve").rotation.set(0,0,0),objectives[0].visible=!0,objectives[1].visible=!0,gridMapHelper.obstacles[0].active=!0,gridMapHelper.obstacles[1].active=!0,gridMapHelper.restartLasers(),lasersVisualRestart(),setLaserStates()},winCondition=()=>!objectives[0].visible&&!objectives[1].visible,setLaserStatesInterval=setInterval((()=>{sceneProperties.executing||(laserState=(laserState+1)%2,setLaserStates())}),1e3),spikeTrapState=0,setSpikeTrapState=()=>{0==spikeTrapState?(0,$dhcg3.trapsDeactivation)(traps):(0,$dhcg3.trapsActivation)(traps)},setSpikeTrapStateInterval=setInterval((()=>{sceneProperties.executing||(spikeTrapState=(spikeTrapState+1)%2,setSpikeTrapState())}),1e3),timerUpadate=setInterval(updateTime,1e3)})),phaseGeneration.push((()=>{document.getElementById("phaseTitle").innerText="Nível 3 - Fase 8 de 8",document.getElementById("phaseObjective").innerText="Faça o robô chegar aos cristais, após isso, os colete.",sceneProperties.executing=!1,camera.position.set(0,15,30),actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),objectives=(0,$7FzN9.loadDefaultObjectives)(3),objectives[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(0),0,gridMapHelper.getGlobalZPositionFromCoord(0)),objectives[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(1)),objectives[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(3)),gridMapHelper.addObstacle(0,0,0,0),gridMapHelper.addObstacle(9,9,1,1),gridMapHelper.addObstacle(9,9,3,3),scene.add(objectives[0]),scene.add(objectives[1]),scene.add(objectives[2]),traps=[],traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps.push(new(0,$dhcg3.SpikeTrap)),traps[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(0),0,gridMapHelper.getGlobalZPositionFromCoord(1)),traps[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(8),0,gridMapHelper.getGlobalZPositionFromCoord(3)),traps[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(9),0,gridMapHelper.getGlobalZPositionFromCoord(2)),gridMapHelper.addTrap(0,1,traps[0]),gridMapHelper.addTrap(8,3,traps[1]),gridMapHelper.addTrap(9,2,traps[2]),scene.add(traps[0]),scene.add(traps[1]),scene.add(traps[2]),walls=[];const e=new $4xklQ.BoxGeometry(14,2,2),a=new $4xklQ.BoxGeometry(10,2,2),t=new $4xklQ.BoxGeometry(6,2,2),r=new $4xklQ.BoxGeometry(4,2,2),o=new $4xklQ.BoxGeometry(2,2,2),l=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];l[2].map.repeat.set(7,1),l[3].map.repeat.set(7,1),l[4].map.repeat.set(7,1),l[5].map.repeat.set(7,1);const s=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];s[2].map.repeat.set(5,1),s[3].map.repeat.set(5,1),s[4].map.repeat.set(5,1),s[5].map.repeat.set(5,1);const i=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];i[2].map.repeat.set(3,1),i[3].map.repeat.set(3,1),i[4].map.repeat.set(3,1),i[5].map.repeat.set(3,1);const n=[new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()}),new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()})];n[2].map.repeat.set(2,1),n[3].map.repeat.set(2,1),n[4].map.repeat.set(2,1),n[5].map.repeat.set(2,1);const p=new $4xklQ.MeshLambertMaterial({map:wallTexture.clone()});walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(e,l)),walls.push(new $4xklQ.Mesh(a,s)),walls.push(new $4xklQ.Mesh(t,i)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(r,n)),walls.push(new $4xklQ.Mesh(o,p)),walls.push(new $4xklQ.Mesh(o,p)),walls[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(1),1,gridMapHelper.getGlobalZPositionFromCoord(5)),walls[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(6)),walls[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(5),1,gridMapHelper.getGlobalZPositionFromCoord(5)),walls[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(1)),walls[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(8)),walls[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(8.5),1,gridMapHelper.getGlobalZPositionFromCoord(6)),walls[6].position.set(gridMapHelper.getGlobalXPositionFromCoord(7.5),1,gridMapHelper.getGlobalZPositionFromCoord(4)),walls[7].position.set(gridMapHelper.getGlobalXPositionFromCoord(7.5),1,gridMapHelper.getGlobalZPositionFromCoord(2)),walls[8].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),1,gridMapHelper.getGlobalZPositionFromCoord(6)),walls[9].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(0)),gridMapHelper.addObstacle(1,1,2,8),gridMapHelper.addObstacle(3,3,3,9),gridMapHelper.addObstacle(5,5,2,8),gridMapHelper.addObstacle(1,5,1,1),gridMapHelper.addObstacle(6,8,8,8),gridMapHelper.addObstacle(8,9,6,6),gridMapHelper.addObstacle(7,8,4,4),gridMapHelper.addObstacle(7,8,2,2),gridMapHelper.addObstacle(6,6,6,6),gridMapHelper.addObstacle(7,7,0,0),walls[0].rotateY(Math.PI/2),walls[1].rotateY(Math.PI/2),walls[2].rotateY(Math.PI/2),scene.add(walls[0]),scene.add(walls[1]),scene.add(walls[2]),scene.add(walls[3]),scene.add(walls[4]),scene.add(walls[5]),scene.add(walls[6]),scene.add(walls[7]),scene.add(walls[8]),scene.add(walls[9]),laserFences=[],laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("blue")),laserFences.push(new(0,$j0YSa.default)("blue")),laserFences.push(new(0,$j0YSa.default)("red")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences.push(new(0,$j0YSa.default)("multiColor")),laserFences[0].position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(6)),laserFences[1].position.set(gridMapHelper.getGlobalXPositionFromCoord(2),1,gridMapHelper.getGlobalZPositionFromCoord(8)),laserFences[2].position.set(gridMapHelper.getGlobalXPositionFromCoord(3),1,gridMapHelper.getGlobalZPositionFromCoord(0)),laserFences[3].position.set(gridMapHelper.getGlobalXPositionFromCoord(4),1,gridMapHelper.getGlobalZPositionFromCoord(3)),laserFences[4].position.set(gridMapHelper.getGlobalXPositionFromCoord(6),1,gridMapHelper.getGlobalZPositionFromCoord(9)),laserFences[5].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(6)),laserFences[6].position.set(gridMapHelper.getGlobalXPositionFromCoord(7),1,gridMapHelper.getGlobalZPositionFromCoord(1)),gridMapHelper.addLaser(0,6,laserFences[0]),gridMapHelper.addLaser(2,8,laserFences[1]),gridMapHelper.addLaser(3,0,laserFences[2]),gridMapHelper.addLaser(4,3,laserFences[3]),gridMapHelper.addLaser(6,9,laserFences[4]),gridMapHelper.addLaser(7,6,laserFences[5]),gridMapHelper.addLaser(7,1,laserFences[6]),laserFences[0].rotateY(Math.PI/2),laserFences[1].rotateY(Math.PI/2),laserFences[3].rotateY(Math.PI/2),laserFences[5].rotateY(Math.PI/2),scene.add(laserFences[0]),scene.add(laserFences[1]),scene.add(laserFences[2]),scene.add(laserFences[3]),scene.add(laserFences[4]),scene.add(laserFences[5]),scene.add(laserFences[6]),laserState=0,setLaserStates=()=>{0==laserState?(changeLaserStateStatus(0,"blue"),changeLaserActiveStatus(2,!0),changeLaserActiveStatus(3,!1),changeLaserActiveStatus(4,!0)):(changeLaserStateStatus(0,"red"),changeLaserActiveStatus(2,!1),changeLaserActiveStatus(3,!0),changeLaserActiveStatus(4,!1))},coletarCristal=()=>{sceneProperties.cancelExecution||((0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[0],gridMapHelper)?(objectives[0].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[0].active=!1):(0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[1],gridMapHelper)?(objectives[1].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[1].active=!1):(0,$7FzN9.checkCollision)(actor.getObjectByName("interactionReference"),objectives[2],gridMapHelper)?(objectives[2].visible=!1,consoleElement.innerText+="Cristal coletado.\n",gridMapHelper.obstacles[2].active=!1):consoleElement.innerText+="Robô não está em frente ao cristal.\n",objectives[0].visible||objectives[1].visible||objectives[2].visible||(consoleElement.innerText+="Todos os cristais coletados com sucesso!\n"))},resetLevel=()=>{actor.position.set(gridMapHelper.getGlobalXPositionFromCoord(0),1,gridMapHelper.getGlobalZPositionFromCoord(5)),actor.rotation.set(0,(0,$7FzN9.degreeToRadians)(90),0),actor.getObjectByName("eve").rotation.set(0,0,0),objectives[0].visible=!0,objectives[1].visible=!0,objectives[2].visible=!0,gridMapHelper.obstacles[0].active=!0,gridMapHelper.obstacles[1].active=!0,gridMapHelper.obstacles[2].active=!0,gridMapHelper.restartLasers(),lasersVisualRestart(),setLaserStates()},winCondition=()=>!(objectives[0].visible||objectives[1].visible||objectives[2].visible),setLaserStatesInterval=setInterval((()=>{sceneProperties.executing||(laserState=(laserState+1)%2,setLaserStates())}),1e3),spikeTrapState=0,setSpikeTrapState=()=>{0==spikeTrapState?(0,$dhcg3.trapsDeactivation)(traps):(0,$dhcg3.trapsActivation)(traps)},setSpikeTrapStateInterval=setInterval((()=>{sceneProperties.executing||(spikeTrapState=(spikeTrapState+1)%2,setSpikeTrapState())}),1e3),document.getElementById("winMessage").innerText="Nível Concluído",document.getElementById("advanceBtn").innerText="Finalizar",timerUpadate=setInterval(updateTime,1e3)})),window.addEventListener("resize",(()=>{(0,$7FzN9.resizeCanvasToDisplaySize)(renderer,camera)}));const finishEarlierButton=document.getElementById("finishEarlier"),execBtn=document.getElementById("execBtn");execBtn.addEventListener("click",(async function(){const codeParsed=(0,$kXIAH.default)(editor.state.doc.toString());console.log(codeParsed),cancelAnimationFrame($7FzN9.corrID),cancelAnimationFrame($7FzN9.requestID),cancelAnimationFrame($7FzN9.changColorID),cancelAnimationFrame($7FzN9.smokeAnimationFrame),$7FzN9.smoke.deactiveSmokes(),sceneProperties.cancelExecution=!1,actor.getObjectByName("eve").position.y=0,null!=traps&&(0,$dhcg3.trapsDeactivation)(traps),null!=codeParsed&&((0,$bsNDL.updateTheme)(editor,1),resetLevel(),sceneProperties.executing=!0,this.disabled=!0,await eval(codeParsed),winCondition()?($bsNDL.readOnlyState.doc=editor.state.doc,editor.setState($bsNDL.readOnlyState),document.getElementById("winMessage").classList.remove("invisible"),document.getElementById("advanceBtn").classList.remove("invisible"),document.getElementById("resetBtn").disabled=!0,finishEarlierButton.disabled=!0,clearInterval(timerUpadate),sceneProperties.phase==phaseGeneration.length-1&&(0,$hfAuX.configureDataAndUpload)(document.getElementById("name"),document.getElementById("age"),"gender","prog-exp",document.getElementById("subBtn"),sceneProperties.timer,"../","Nível 3/Completo")):((0,$bsNDL.updateTheme)(editor,0),sceneProperties.executing=!1,this.disabled=!1))}));const resetBtn=document.getElementById("resetBtn");resetBtn.addEventListener("click",(()=>{cancelAnimationFrame($7FzN9.corrID),cancelAnimationFrame($7FzN9.requestID),cancelAnimationFrame($7FzN9.changColorID),cancelAnimationFrame($7FzN9.smokeAnimationFrame),$7FzN9.smoke.deactiveSmokes(),(0,$bsNDL.updateTheme)(editor,0),sceneProperties.cancelExecution=!0,actor.getObjectByName("eve").position.y=0,0!=$7FzN9.materialColor.length&&(0,$7FzN9.resetRobotColor)(actor),resetLevel()}));const advanceBtn=document.getElementById("advanceBtn");advanceBtn.addEventListener("click",(e=>{sceneProperties.phase++,sceneProperties.phase<phaseGeneration.length?(setLaserStatesInterval&&(clearInterval(setLaserStatesInterval),setLaserStatesInterval=void 0),removeObjects(objectives,walls,traps,laserFences),phaseGeneration[sceneProperties.phase](),editor.setState($bsNDL.editState),consoleElement.innerText=null,document.getElementById("winMessage").classList.add("invisible"),document.getElementById("advanceBtn").classList.add("invisible"),execBtn.disabled=!1,resetBtn.disabled=!1,finishEarlierButton.disabled=!1):(sceneProperties.phase=sceneProperties.phase>phaseGeneration.length?phaseGeneration.length:sceneProperties.phase,logModal.show())})),finishEarlierButton.addEventListener("click",(e=>{confirm("Deseja realmente finalizar a prática?")&&(clearInterval(timerUpadate),(0,$hfAuX.configureDataAndUpload)(document.getElementById("name"),document.getElementById("age"),"gender","prog-exp",document.getElementById("subBtn"),sceneProperties.timer,"../",`Nível 3/Fase ${sceneProperties.phase+1}`),logModal.show())}));let normalSpeedBtn=document.getElementById("normalSpeed"),fastSpeedBtn=document.getElementById("fastSpeed");normalSpeedBtn.addEventListener("click",(function(){this.disabled=!0,fastSpeedBtn.disabled=!1,sceneProperties.mult=1})),fastSpeedBtn.addEventListener("click",(function(){this.disabled=!0,normalSpeedBtn.disabled=!1,sceneProperties.mult=6})),(0,$7FzN9.resizeCanvasToDisplaySize)(renderer,camera),phaseGeneration[sceneProperties.phase](),animate()})),parcelRequire.register("kXIAH",(function(e,a){$parcel$export(e.exports,"default",(()=>c));const t=[{filter:new RegExp("^andarFrente(\\s+)?\\((\\s+)?(0|[1-9][0-9]*)(\\s+)?\\)(\\s+)?(;)?$"),type:"sequential"},{filter:new RegExp("^andarTras(\\s+)?\\((\\s+)?(0|[1-9][0-9]*)(\\s+)?\\)(\\s+)?(;)?$"),type:"sequential"},{filter:new RegExp("^girarEsquerda(\\s+)?\\((\\s+)?\\)(\\s+)?(;)?$"),type:"sequential"},{filter:new RegExp("^girarDireita(\\s+)?\\((\\s+)?\\)(\\s+)?(;)?$"),type:"sequential"},{filter:new RegExp("^darMeiaVolta(\\s+)?\\((\\s+)?\\)(\\s+)?(;)?$"),type:"sequential"},{filter:new RegExp("^coletarCristal(\\s+)?\\((\\s+)?\\)(\\s+)?(;)?$"),type:"normal"},{filter:new RegExp("^desativarLaserAzul(\\s+)?\\((\\s+)?\\)(\\s+)?(;)?$"),type:"mustCondition"},{filter:new RegExp("^desativarLaserVermelho(\\s+)?\\((\\s+)?\\)(\\s+)?(;)?$"),type:"mustCondition"},{filter:new RegExp("^se(\\s+)?\\((\\s+)?.+\\)$"),type:"conditional"},{filter:new RegExp("^se(\\s+)?\\((\\s+)?.+\\)(\\s+)?{$"),type:"conditional&&blockValidation"},{filter:new RegExp("^senão$"),type:"elseValidation"},{filter:new RegExp("^senão(\\s+)?{$"),type:"elseValidation&&blockValidation"},{filter:new RegExp("^}$"),type:"closeBlockValidation"},{filter:new RegExp("^{$"),type:"blockValidation"}],r=[new RegExp("true"),new RegExp("false"),new RegExp("^laserAzulAtivo(\\s+)?\\((\\s+)?\\)(\\s+)?$"),new RegExp("^laserVermelhoAtivo(\\s+)?\\((\\s+)?\\)(\\s+)?$")];function o(e){let a=e.trim(),t=e.substring(a.indexOf("(")+1,a.lastIndexOf(")"));for(let e=0;e<r.length;e++)if(r[e].test(t.trim()))return!0;return!1}function l(e,a){let t=!1,r=0;for(let o=a+1;o<e.length;o++)if(e[o].includes("}")){if(0==r){t=!0;break}r--}else{if(!e[o].includes("{"))continue;r++}return t}function s(e,a){let t=!1;for(let r=a-1;r>=0;r--)if(e[r].includes("{")){t=!0;break}return t}function i(e,a){let t=!1,r=new RegExp("^se(\\s+)?\\((\\s+)?.+\\)(\\s+)?(\\s+)?$"),o=new RegExp("^se(\\s+)?\\((\\s+)?.+\\)$"),l=new RegExp("^se(\\s+)?\\((\\s+)?.+\\)(\\s+)?{[^}]*?$"),s=new RegExp("^se(\\s+)?\\((\\s+)?.+\\)(\\s+)?{$"),i=new RegExp("^senão$"),n=new RegExp("^senão(\\s+)?{$"),p=new RegExp("^senão(\\s+)?.+(\\s+)?$"),d=new RegExp("^senão(\\s+)?{[^]*?$"),c=null;for(let t=a-1;t>=0;t--)if(o.test(e[t].trim())||s.test(e[t].trim())||i.test(e[t].trim())||n.test(e[t].trim())){c=t;break}if(null!=c){let o="";for(let t=c;t<a;t++)o+=`${e[t].trim()}\n`;return r.test(o.trim())||l.test(o.trim())||p.test(o.trim())||d.test(o.trim())?(t=!0,t):t}return t}function n(e,a){let t=!1,r=new RegExp("^se(\\s+)?\\((\\s+)?.+\\)(\\s+)?.+(\\s+)?$"),o=new RegExp("^se(\\s+)?\\((\\s+)?.+\\)$"),l=new RegExp("^se(\\s+)?\\((\\s+)?.+\\)(\\s+)?{[^]*?}$"),s=new RegExp("^se(\\s+)?\\((\\s+)?.+\\)(\\s+)?{$"),i=null;for(let t=a-1;t>=0;t--)if(o.test(e[t].trim())||s.test(e[t].trim())){i=t;break}if(null!=i){let o="";for(let t=i;t<a;t++)o+=`${e[t].trim()}\n`;return r.test(o.trim())||l.test(o.trim())?(t=!0,t):t}return t}function p(e,a){const t=[new RegExp("^andarFrente(\\s+)?\\((\\s+)?\\d+(\\s+)?\\)(\\s+)?(;)?$"),new RegExp("^andarTras(\\s+)?\\((\\s+)?\\d+(\\s+)?\\)(\\s+)?(;)?$"),new RegExp("^girarEsquerda(\\s+)?\\((\\s+)?\\)(\\s+)?(;)?$"),new RegExp("^girarDireita(\\s+)?\\((\\s+)?\\)(\\s+)?(;)?$"),new RegExp("^darMeiaVolta(\\s+)?\\((\\s+)?\\)(\\s+)?(;)?$")];let r=[0,5],o=0,l="+",s=0;function i(e){return[{axis:0,value:"+"},{axis:1,value:"+"},{axis:0,value:"-"},{axis:1,value:"-"}][e]}function n(e){return e>3?0:e<0?3:e}for(let p=0;p<a;p++)if(t[0].test(e[p])){let a=parseInt(e[p].substring(e[p].indexOf("(")+1,e[p].indexOf(")")));"+"==l?r[o]+=a:r[o]-=a}else if(t[1].test(e[p])){let a=parseInt(e[p].substring(e[p].indexOf("(")+1,e[p].indexOf(")")));"-"==l?r[o]+=a:r[o]-=a}else if(t[2].test(e[p])){s--,s=n(s);const e=i(s);o=e.axis,l=e.value}else if(t[3].test(e[p])){s++,s=n(s);const e=i(s);o=e.axis,l=e.value}else{if(!t[4].test(e[p]))continue;{s--,s=n(s),s--,s=n(s);const e=i(s);o=e.axis,l=e.value}}return"+"==l?r[o]++:r[o]--,r}function d(e,a){document.getElementById("consoleArea").innerText+=`Código inválido: ${e} linha: ${a}\n`}function c(e,a=0){let r="const delay = (milisecs) => {return new Promise((resolve) => setTimeout(resolve,milisecs));}\nasync function runCode(){\n",c="\n",m=e.split("\n"),g=!0,M=0;for(let e=0;e<m.length;e++){let b,w=!1;if(""!=m[e].trim()){for(let a=0;a<t.length;a++)if(w=t[a].filter.test(m[e].trim()),w){b=t[a].type;break}if(!w){d(m[e],e+1),g=!1;break}if("sequential"===b){let a=`editor.focus();\n                    editor.dispatch({selection:{anchor:editor.state.doc.line(${e+1}).from}});\n`;a+="await "+m[e].trim()+"\n",r+=a,M++}else if("conditional&&blockValidation"===b){let a=!1;if(l(m,e)?o(m[e])?a=!0:d(`${m[e]} (Condição inválida)`,e+1):d(`${m[e]} (Bloco é aberto mas nunca é fechado)`,e+1),!a){g=!1;break}{let a=m[e].trim(),t=`editor.focus();\n                        editor.dispatch({selection:{anchor:editor.state.doc.line(${e+1}).from}});\n                        await delay(250);\n`;t+=`if${a.substring(a.indexOf("("))}\n`,r+=t,M++}}else if("conditional"===b){if(!o(m[e])){d(`${m[e]} (Condição inválida)`,e+1),g=!1;break}{let a=m[e].trim(),t=`editor.focus();\n                        editor.dispatch({selection:{anchor:editor.state.doc.line(${e+1}).from}});\n                        await delay(250);\n`;t+=`if${a.substring(a.indexOf("("))}\n`,r+=t,M++}}else if("elseValidation"===b){if(!n(m,e)){d(`${m[e]} (Condição inválida)`,e+1),g=!1;break}r+="else\n",M++}else if("elseValidation&&blockValidation"===b){let a=!1;if(l(m,e)?n(m,e)?a=!0:d(`${m[e]} (Condição inválida)`,e+1):d(`${m[e]} (Bloco é aberto mas nunca é fechado)`,e+1),!a){g=!1;break}r+="else{\n",M++}else if("blockValidation"===b){if(!l(m,e)){d(`${m[e]} (Bloco é aberto mas nunca é fechado)`,e+1),g=!1;break}r+=`${m[e].trim()}\n`,M++}else if("closeBlockValidation"===b){if(!s(m,e)){d(`${m[e]} (Bloco é fechado mas nunca é aberto)`,e+1),g=!1;break}r+=`${m[e].trim()}\n`,M++}else if("mustCondition"===b)if(i(m,e)){let a=`editor.focus();\n                        editor.dispatch({selection:{anchor:editor.state.doc.line(${e+1}).from}});\n                        await delay(250);\n`;a+=m[e].trim()+"\n",r+=a,M++}else{let a=t[6].filter.test(m[e].trim())?"blue":"red",o=p(m,e);c+=`badLuck([${o[0]},${o[1]}],'${a}')\n`;let l=`editor.focus();\n                        editor.dispatch({selection:{anchor:editor.state.doc.line(${e+1}).from}});\n                        await delay(250);\n`;l+=m[e].trim()+"\n",r+=l,M++}else{let a=`editor.focus();\n                    editor.dispatch({selection:{anchor:editor.state.doc.line(${e+1}).from}});\n                    await delay(250);\n`;a+=m[e].trim()+"\n",r+=a,M++}if(a>0&&M>a){document.getElementById("consoleArea").innerText+=`Aviso: O código tem mais linhas do que o robô pode processar. Tente rescrever seu código em ${a} linhas ou menos.\n`,g=!1;break}}}return g?(r+=`}${c}runCode()\n`,r):null}})),parcelRequire.register("j0YSa",(function(e,a){$parcel$export(e.exports,"default",(()=>n));var t=parcelRequire("4xklQ");parcelRequire("acMZl");class r extends t.Mesh{constructor(){super(new t.BoxGeometry(.5,2,.15),new t.MeshPhongMaterial({color:"white"}))}}class o extends t.Mesh{constructor(){super(new t.TorusGeometry(.15,.05,10,20),new t.MeshPhongMaterial({color:"black"}))}}class l extends t.Mesh{constructor(){super(new t.BoxGeometry(.5,2,.1),new t.MeshPhongMaterial({color:"white"}))}}class s extends t.Mesh{constructor(e){super(new t.CylinderGeometry(.1,.1,2,64,64),new t.MeshPhongMaterial({emissive:e,color:e,emissiveIntensity:1,transparent:!0,opacity:.7}))}}class i extends t.Object3D{constructor(e){super(),this.index=0,this.x=0,this.z=0,this.state=e,this.active=!0,this.type=e;let a=new l;a.rotateX(-Math.PI/2),a.position.set(0,-.95,0);let t=new r;t.position.set(0,0,-.93);let i=new r;i.position.set(0,0,.93);let n=new o;n.position.set(0,.6,.85);let p=new o;p.position.set(0,.6,-.85);let d=new o;d.position.set(0,0,.85);let c=new o;c.position.set(0,0,-.85);let m=new o;m.position.set(0,-.6,.85);let g=new o;g.position.set(0,-.6,-.85);let M=new s("blue");M.rotateX(-Math.PI/2),M.position.set(0,.6,0);let b=new s("blue");b.rotateX(-Math.PI/2),b.position.set(0,0,0);let w=new s("blue");w.rotateX(-Math.PI/2),w.position.set(0,-.6,0),this.blueLasers=[M,b,w];let u=new s("red");u.rotateX(-Math.PI/2),u.position.set(0,.6,0);let h=new s("red");h.rotateX(-Math.PI/2),h.position.set(0,0,0);let x=new s("red");return x.rotateX(-Math.PI/2),x.position.set(0,-.6,0),this.redLasers=[u,h,x],"blue"==e?(this.blueLasers.forEach((e=>e.visible=!0)),this.redLasers.forEach((e=>e.visible=!1)),this.state="blue"):"red"!=e&&"multiColor"!=e||(this.blueLasers.forEach((e=>e.visible=!1)),this.state="red"),this.add(a),this.add(t),this.add(i),this.add(n),this.add(p),this.add(d),this.add(c),this.add(m),this.add(g),this.add(M),this.add(b),this.add(w),this.add(u),this.add(h),this.add(x),this}setVisible(){this.active=!0}setNotVisible(){this.blueLasers.forEach((e=>e.visible=!1)),this.redLasers.forEach((e=>e.visible=!1)),this.active=!1}setBlue(){1==this.active&&(this.blueLasers.forEach((e=>e.visible=!0)),this.redLasers.forEach((e=>e.visible=!1)),this.state="blue")}setRed(){1==this.active&&(this.blueLasers.forEach((e=>e.visible=!1)),this.redLasers.forEach((e=>e.visible=!0)),this.state="red")}}var n=i})),parcelRequire.register("9fFOq",(function(e,a){e.exports=new URL("../"+parcelRequire("dRo73").resolve("53w00"),import.meta.url).toString()}));var $5eb0e2c60d85a452$exports={};parcelRequire("dRo73").register(JSON.parse('{"7e22K":"index.1a9acdef.js","53w00":"metalWallLvl3.c6e3c749.png","a7dpq":"index.df9ddcf1.js","beAp0":"index.5a96cabf.js"}')),parcelRequire("3YhQm");